// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  password        String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  isVerified      Boolean           @default(false)
  PasswordPinCode PasswordPinCode[]
  passwords       AddPassword[]
  lists           Notes[]
}

model AddPassword {
  id          String     @id @default(uuid())
  catagory    String
  name        String?
  password    String
  url         String?
  notes       String?
  image       String?
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  User        User       @relation(fields: [userId], references: [id])
  userId      String
  workTime    WorkTime[]
}

model Notes {
  id          String      @id @default(uuid())
  title       String?
  description String?
  priority    String?
  date        String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  listTypes   NoteTypes[]
  User        User?       @relation(fields: [userId], references: [id])
  userId      String?
}

model NoteTypes {
  id      String  @id @default(uuid())
  name    String?
  detail  String?
  Notes   Notes?  @relation(fields: [notesId], references: [id])
  notesId String?
}

enum timeTypes {
  hrs
  min
  sec
}

model WorkTime {
  id            String       @id @default(uuid())
  name          String
  time          String?
  description   String?
  alarm         String?
  timeType      timeTypes
  AddPassword   AddPassword? @relation(fields: [addPasswordId], references: [id])
  addPasswordId String?
}

model PasswordPinCode {
  id      String  @id @default(uuid())
  pinCode String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}
